<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JOJOTOV</title>
  <subtitle>Jojo &#39;s site</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dingtz.com/"/>
  <updated>2016-08-09T14:39:28.000Z</updated>
  <id>https://dingtz.com/</id>
  
  <author>
    <name>Jojo Ding</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NSProxy——少见却神奇的类</title>
    <link href="https://dingtz.com/2016/08/09/NSProxy%E2%80%94%E2%80%94%E5%B0%91%E8%A7%81%E5%8D%B4%E7%A5%9E%E5%A5%87%E7%9A%84%E7%B1%BB/"/>
    <id>https://dingtz.com/2016/08/09/NSProxy——少见却神奇的类/</id>
    <published>2016-08-08T17:53:22.000Z</published>
    <updated>2016-08-09T14:39:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，NSObject类是Objective-C中大部分类的基类。但不是很多人知道除了NSObject之外的另一个基类——NSProxy<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NS_ROOT_CLASS</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSProxy</span> &lt;<span class="title">NSObject</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这个奇怪的类是干嘛的？请允许我做一个黑人问号脸<br>马上查了一下Apple的官方文档：<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/" target="_blank" rel="external">NSProxy</a></p>
<blockquote>
<p>NSProxy is an abstract superclass defining an API for objects that act as stand-ins for other objects or for objects that don’t exist yet. Typically, a message to a proxy is forwarded to the real object or causes the proxy to load (or transform itself into) the real object. Subclasses of NSProxy can be used to implement transparent distributed messaging (for example, <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDistantObject_Class/index.html#//apple_ref/occ/cl/NSDistantObject" target="_blank" rel="external">NSDistantObject</a>) or for lazy instantiation of objects that are expensive to create.</p>
</blockquote>
<p>总的来说，NSProxy是一个虚类，你可以通过继承它，并重写这两个方法以实现消息转发到另一个实例<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation;</div><div class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)sel;</div></pre></td></tr></table></figure></p>
<p>现在NSProxy的真面目终于浮出水面：<strong>负责将消息转发到真正的target的代理类</strong>。举个例子，你想要卖一件二手物品，但是你并不想直接跟卖家接触<strong>（直接向target发消息）</strong>，这时你去找了一个第三方，你告诉这个第三方你要买什么、出多少钱买、什么时候要等<strong>（向代理发消息）</strong>，第三方再去跟卖家接触并把这些信息转告卖家<strong>（转发消息给真实的target）</strong>，最后通过第三方去完成这个交易。</p>
<p>了解完NSProxy是是什么以后，那么它究竟能帮我们干些什么呢？</p>
<p>##通过NSProxy在Objective-C中模拟多继承</p>
<p>多继承在编程中可以说是比较有用的特性。举个例子，原本有两个相互独立的类A和类B，它们各自继承各自的父类，项目进行地好好的，突然有一天产品经理过来告诉你，我要在下个版本加一个xxxxx的特性，非常紧急。一脸懵逼的你发现如果要实现这个特性，你需要对类A以及其父类作很大的修改，代价非常之高。突然你意识到原来类B的父类已经有类似的功能，你只需要让类A继承于类B的父类并重写其某些方法就能实现，这样做高效且低风险，于是你屁颠屁颠地撸起了代码。</p>
<p>可是，Objective-C却不支持这样一个强大的特性。不过NSProxy可以帮我们在某种程度上（这只是一个模拟的多继承，并不是完全的多继承）解决这个问题：</p>
<p><code>现在假设我们想要去买书，但是我懒癌犯了，不想直接去书店（供应商）买，如果有一个跑腿的人（经销商）帮我去书店买完，我再跟他买。同时，我买完书又想买件衣服，我又可以很轻松地在他那里买到一件衣服（多继承）。</code></p>
<p>首先，我们定义BookProvider类与ClothesProvider类作为基类。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  TDBookProvider.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">TDBookProviderProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)purchaseBookWithTitle:(<span class="built_in">NSString</span> *)bookTitle;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TDBookProvider</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  TDClothesProvider.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span> (<span class="built_in">NSInteger</span>, TDClothesSize)&#123;</div><div class="line">    TDClothesSizeSmall = <span class="number">0</span>,</div><div class="line">    TDClothesSizeMedium,</div><div class="line">    TDClothesSizeLarge</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">TDClothesProviderProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)purchaseClothesWithSize:(TDClothesSize )size;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TDClothesProvider</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里要注意：<strong>一定要通过protocol来声明接口，而不是直接在类的@interfere中定义。</strong>因为通过protocol来声明接口，然后让proxy类遵循此协议，可以骗过编译器防止编译器提示proxy类未声明接口的错误。这个问题下面可以看到。</p>
<p>然后是这两个类的实现<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  TDBookProvider.m</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"TDBookProvider.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TDBookProvider</span> () &lt;<span class="title">TDBookProviderProtocol</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TDBookProvider</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)purchaseBookWithTitle:(<span class="built_in">NSString</span> *)bookTitle&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"You've bought \"%@\""</span>,bookTitle);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  TDClothesProvider.m</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"TDClothesProvider.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TDClothesProvider</span> () &lt;<span class="title">TDClothesProviderProtocol</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TDClothesProvider</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)purchaseClothesWithSize:(TDClothesSize )size&#123;</div><div class="line">    <span class="built_in">NSString</span> *sizeStr;</div><div class="line">    <span class="keyword">switch</span> (size) &#123;</div><div class="line">        <span class="keyword">case</span> TDClothesSizeLarge:</div><div class="line">            sizeStr = <span class="string">@"large size"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> TDClothesSizeMedium:</div><div class="line">            sizeStr = <span class="string">@"medium size"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> TDClothesSizeSmall:</div><div class="line">            sizeStr = <span class="string">@"small size"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"You've bought some clothes of %@"</span>,sizeStr);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>现在两个Provider的类写完，我们可以直接向供应商买东西了，但这跟我们的需求还有很大差异，我们需要一个中间的经销商<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  TDDealerProxy.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"TDBookProvider.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"TDClothesProvider.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TDDealerProxy</span> : <span class="title">NSProxy</span> &lt;<span class="title">TDBookProviderProtocol</span>, <span class="title">TDClothesProviderProtocol</span>&gt;</span></div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span> )dealerProxy;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>这里有两个要注意的问题：<br>1、TDDealerProxy这个子类必须要遵循之前定义的两个协议TDBookProviderProtocol与TDClothesProviderProtocol，目的是骗过编译器，让编译器认为这个类实现了上面两个协议<br>2、NSProxy类是没有init方法的，也就是说如果我们要获得一个NSProxy的实例，代码只需要这样：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSProxy</span> *proxyInstance = [<span class="built_in">NSProxy</span> alloc];</div></pre></td></tr></table></figure></p>
<p>接下来看实现文件<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  TDDealerProxy.m</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"TDDealerProxy.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TDDealerProxy</span> () </span>&#123;</div><div class="line">    TDBookProvider          *_bookProvider;</div><div class="line">    TDClothesProvider       *_clothesProvider;</div><div class="line">    <span class="built_in">NSMutableDictionary</span>     *_methodsMap;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TDDealerProxy</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - class method</span></div><div class="line">+ (<span class="keyword">instancetype</span>)dealerProxy&#123;</div><div class="line">    <span class="keyword">return</span> [[TDDealerProxy alloc] init];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - init</span></div><div class="line">- (<span class="keyword">instancetype</span>)init&#123;</div><div class="line">    _methodsMap = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    _bookProvider = [[TDBookProvider alloc] init];</div><div class="line">    _clothesProvider = [[TDClothesProvider alloc] init];</div><div class="line"></div><div class="line">    <span class="comment">//映射target及其对应方法名</span></div><div class="line">    [<span class="keyword">self</span> _registerMethodsWithTarget:_bookProvider];</div><div class="line">    [<span class="keyword">self</span> _registerMethodsWithTarget:_clothesProvider];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - private method</span></div><div class="line">- (<span class="keyword">void</span>)_registerMethodsWithTarget:(<span class="keyword">id</span> )target&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> numberOfMethods = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//获取target方法列表</span></div><div class="line">    Method *method_list = class_copyMethodList([target <span class="keyword">class</span>], &amp;numberOfMethods);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfMethods; i ++) &#123;</div><div class="line">        <span class="comment">//获取方法名并存入字典</span></div><div class="line">        Method temp_method = method_list[i];</div><div class="line">        SEL temp_sel = method_getName(temp_method);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *temp_method_name = sel_getName(temp_sel);</div><div class="line">        [_methodsMap setObject:target forKey:[<span class="built_in">NSString</span> stringWithUTF8String:temp_method_name]];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    free(method_list);</div><div class="line">&#125;</div><div class="line"><span class="meta">#pragma mark - NSProxy override methods</span></div><div class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)invocation&#123;</div><div class="line">    <span class="comment">//获取当前选择子</span></div><div class="line">    SEL sel = invocation.selector;</div><div class="line">    </div><div class="line">    <span class="comment">//获取选择子方法名</span></div><div class="line">    <span class="built_in">NSString</span> *methodName = <span class="built_in">NSStringFromSelector</span>(sel);</div><div class="line">    </div><div class="line">    <span class="comment">//在字典中查找对应的target</span></div><div class="line">    <span class="keyword">id</span> target = _methodsMap[methodName];</div><div class="line">    </div><div class="line">    <span class="comment">//检查target</span></div><div class="line">    <span class="keyword">if</span> (target &amp;&amp; [target respondsToSelector:sel]) &#123;</div><div class="line">        [invocation invokeWithTarget:target];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">super</span> forwardInvocation:invocation];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)sel&#123;</div><div class="line">    <span class="comment">//获取选择子方法名</span></div><div class="line">    <span class="built_in">NSString</span> *methodName = <span class="built_in">NSStringFromSelector</span>(sel);</div><div class="line">    </div><div class="line">    <span class="comment">//在字典中查找对应的target</span></div><div class="line">    <span class="keyword">id</span> target = _methodsMap[methodName];</div><div class="line"></div><div class="line">    <span class="comment">//检查target</span></div><div class="line">    <span class="keyword">if</span> (target &amp;&amp; [target respondsToSelector:sel]) &#123;</div><div class="line">        <span class="keyword">return</span> [target methodSignatureForSelector:sel];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> methodSignatureForSelector:sel];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>大功告成，现在我们的经销商也有了，最后要做的就是告诉经销商我们要买什么书跟什么衣服了（发消息）<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    TDDealerProxy *dealerProxy = [TDDealerProxy dealerProxy];</div><div class="line">    [dealerProxy purchaseBookWithTitle:<span class="string">@"Swift 100 Tips"</span>];</div><div class="line">    [dealerProxy purchaseClothesWithSize:TDClothesSizeMedium];</div><div class="line"></div><div class="line">    <span class="comment">// Override point for customization after application launch.</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行看看log：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2016-08-06 01:10:27.095 TDProxyDemo[37732:924470] You&apos;ve bought &quot;Swift 100 Tips&quot;</div><div class="line">2016-08-06 01:10:27.095 TDProxyDemo[37732:924470] You&apos;ve bought some clothes of medium size</div></pre></td></tr></table></figure></p>
<p>Bravo！<a href="https://github.com/jojoting/TDProxyDemo" target="_blank" rel="external">Demo地址戳我</a></p>
<p>总的来说，NSProxy这个在日常开发者很少见的类，的确有着它奇淫之处，这里推荐几个NSProxy相关的实践</p>
<p><a href="http://blog.sunnyxx.com/2014/08/24/objc-duck/" target="_blank" rel="external">objc与鸭子对象 by sunny</a><br><a href="https://github.com/zwaldowski/BlocksKit" target="_blank" rel="external">BlocksKit by zwaldowski</a><br>附上个人觉得写得很好的一篇源码解析：<br><a href="https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/BlocksKit/%E7%A5%9E%E5%A5%87%E7%9A%84%20BlocksKit%20%EF%BC%88%E4%B8%80%EF%BC%89.md" target="_blank" rel="external">BlocksKit源码解析：《神奇的BlocksKit by Draveness》</a></p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，NSObject类是Objective-C中大部分类的基类。但不是很多人知道除了NSObject之外的另一个基类——NSProxy&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NS_ROOT_CLASS&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSProxy&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个奇怪的类是干嘛的？请允许我做一个黑人问号脸&lt;br&gt;马上查了一下Apple的官方文档：&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/&quot;&gt;NSProxy&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NSProxy is an abstract superclass defining an API for objects that act as stand-ins for other objects or for objects that don’t exist yet. Typically, a message to a proxy is forwarded to the real object or causes the proxy to load (or transform itself into) the real object. Subclasses of NSProxy can be used to implement transparent distributed messaging (for example, &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDistantObject_Class/index.html#//apple_ref/occ/cl/NSDistantObject&quot;&gt;NSDistantObject&lt;/a&gt;) or for lazy instantiation of objects that are expensive to create.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总的来说，NSProxy是一个虚类，你可以通过继承它，并重写这两个方法以实现消息转发到另一个实例&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)forwardInvocation:(&lt;span class=&quot;built_in&quot;&gt;NSInvocation&lt;/span&gt; *)anInvocation;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSMethodSignature&lt;/span&gt; *)methodSignatureForSelector:(SEL)sel;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在NSProxy的真面目终于浮出水面：&lt;strong&gt;负责将消息转发到真正的target的代理类&lt;/strong&gt;。举个例子，你想要卖一件二手物品，但是你并不想直接跟卖家接触&lt;strong&gt;（直接向target发消息）&lt;/strong&gt;，这时你去找了一个第三方，你告诉这个第三方你要买什么、出多少钱买、什么时候要等&lt;strong&gt;（向代理发消息）&lt;/strong&gt;，第三方再去跟卖家接触并把这些信息转告卖家&lt;strong&gt;（转发消息给真实的target）&lt;/strong&gt;，最后通过第三方去完成这个交易。&lt;/p&gt;
&lt;p&gt;了解完NSProxy是是什么以后，那么它究竟能帮我们干些什么呢？&lt;/p&gt;
&lt;p&gt;##通过NSProxy在Objective-C中模拟多继承&lt;/p&gt;
&lt;p&gt;多继承在编程中可以说是比较有用的特性。举个例子，原本有两个相互独立的类A和类B，它们各自继承各自的父类，项目进行地好好的，突然有一天产品经理过来告诉你，我要在下个版本加一个xxxxx的特性，非常紧急。一脸懵逼的你发现如果要实现这个特性，你需要对类A以及其父类作很大的修改，代价非常之高。突然你意识到原来类B的父类已经有类似的功能，你只需要让类A继承于类B的父类并重写其某些方法就能实现，这样做高效且低风险，于是你屁颠屁颠地撸起了代码。&lt;/p&gt;
&lt;p&gt;可是，Objective-C却不支持这样一个强大的特性。不过NSProxy可以帮我们在某种程度上（这只是一个模拟的多继承，并不是完全的多继承）解决这个问题：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;现在假设我们想要去买书，但是我懒癌犯了，不想直接去书店（供应商）买，如果有一个跑腿的人（经销商）帮我去书店买完，我再跟他买。同时，我买完书又想买件衣服，我又可以很轻松地在他那里买到一件衣服（多继承）。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先，我们定义BookProvider类与ClothesProvider类作为基类。&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  TDBookProvider.h&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDBookProviderProtocol&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)purchaseBookWithTitle:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)bookTitle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDBookProvider&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  TDClothesProvider.h&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_ENUM&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;, TDClothesSize)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    TDClothesSizeSmall = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    TDClothesSizeMedium,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    TDClothesSizeLarge&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDClothesProviderProtocol&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)purchaseClothesWithSize:(TDClothesSize )size;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDClothesProvider&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里要注意：&lt;strong&gt;一定要通过protocol来声明接口，而不是直接在类的@interfere中定义。&lt;/strong&gt;因为通过protocol来声明接口，然后让proxy类遵循此协议，可以骗过编译器防止编译器提示proxy类未声明接口的错误。这个问题下面可以看到。&lt;/p&gt;
&lt;p&gt;然后是这两个类的实现&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  TDBookProvider.m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;TDBookProvider.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDBookProvider&lt;/span&gt; () &amp;lt;&lt;span class=&quot;title&quot;&gt;TDBookProviderProtocol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDBookProvider&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)purchaseBookWithTitle:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)bookTitle&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;You&#39;ve bought \&quot;%@\&quot;&quot;&lt;/span&gt;,bookTitle);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  TDClothesProvider.m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;TDClothesProvider.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDClothesProvider&lt;/span&gt; () &amp;lt;&lt;span class=&quot;title&quot;&gt;TDClothesProviderProtocol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDClothesProvider&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)purchaseClothesWithSize:(TDClothesSize )size&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *sizeStr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (size) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; TDClothesSizeLarge:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sizeStr = &lt;span class=&quot;string&quot;&gt;@&quot;large size&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; TDClothesSizeMedium:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sizeStr = &lt;span class=&quot;string&quot;&gt;@&quot;medium size&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; TDClothesSizeSmall:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sizeStr = &lt;span class=&quot;string&quot;&gt;@&quot;small size&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;You&#39;ve bought some clothes of %@&quot;&lt;/span&gt;,sizeStr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在两个Provider的类写完，我们可以直接向供应商买东西了，但这跟我们的需求还有很大差异，我们需要一个中间的经销商&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  TDDealerProxy.h&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;TDBookProvider.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;TDClothesProvider.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDDealerProxy&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSProxy&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;TDBookProviderProtocol&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;TDClothesProviderProtocol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;instancetype&lt;/span&gt; )dealerProxy;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里有两个要注意的问题：&lt;br&gt;1、TDDealerProxy这个子类必须要遵循之前定义的两个协议TDBookProviderProtocol与TDClothesProviderProtocol，目的是骗过编译器，让编译器认为这个类实现了上面两个协议&lt;br&gt;2、NSProxy类是没有init方法的，也就是说如果我们要获得一个NSProxy的实例，代码只需要这样：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSProxy&lt;/span&gt; *proxyInstance = [&lt;span class=&quot;built_in&quot;&gt;NSProxy&lt;/span&gt; alloc];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来看实现文件&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  TDDealerProxy.m&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;TDDealerProxy.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDDealerProxy&lt;/span&gt; () &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    TDBookProvider          *_bookProvider;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    TDClothesProvider       *_clothesProvider;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt;     *_methodsMap;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TDDealerProxy&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - class method&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;instancetype&lt;/span&gt;)dealerProxy&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [[TDDealerProxy alloc] init];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - init&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;instancetype&lt;/span&gt;)init&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _methodsMap = [&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; dictionary];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _bookProvider = [[TDBookProvider alloc] init];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _clothesProvider = [[TDClothesProvider alloc] init];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//映射target及其对应方法名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; _registerMethodsWithTarget:_bookProvider];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; _registerMethodsWithTarget:_clothesProvider];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - private method&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)_registerMethodsWithTarget:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; )target&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numberOfMethods = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取target方法列表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Method *method_list = class_copyMethodList([target &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;], &amp;amp;numberOfMethods);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; numberOfMethods; i ++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//获取方法名并存入字典&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Method temp_method = method_list[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        SEL temp_sel = method_getName(temp_method);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *temp_method_name = sel_getName(temp_sel);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [_methodsMap setObject:target forKey:[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithUTF8String:temp_method_name]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    free(method_list);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - NSProxy override methods&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)forwardInvocation:(&lt;span class=&quot;built_in&quot;&gt;NSInvocation&lt;/span&gt; *)invocation&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取当前选择子&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    SEL sel = invocation.selector;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取选择子方法名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *methodName = &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(sel);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//在字典中查找对应的target&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; target = _methodsMap[methodName];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//检查target&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (target &amp;amp;&amp;amp; [target respondsToSelector:sel]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [invocation invokeWithTarget:target];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; forwardInvocation:invocation];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSMethodSignature&lt;/span&gt; *)methodSignatureForSelector:(SEL)sel&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取选择子方法名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *methodName = &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(sel);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//在字典中查找对应的target&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; target = _methodsMap[methodName];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//检查target&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (target &amp;amp;&amp;amp; [target respondsToSelector:sel]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [target methodSignatureForSelector:sel];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; methodSignatureForSelector:sel];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大功告成，现在我们的经销商也有了，最后要做的就是告诉经销商我们要买什么书跟什么衣服了（发消息）&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)application didFinishLaunchingWithOptions:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)launchOptions &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    TDDealerProxy *dealerProxy = [TDDealerProxy dealerProxy];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [dealerProxy purchaseBookWithTitle:&lt;span class=&quot;string&quot;&gt;@&quot;Swift 100 Tips&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [dealerProxy purchaseClothesWithSize:TDClothesSizeMedium];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Override point for customization after application launch.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行看看log：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;2016-08-06 01:10:27.095 TDProxyDemo[37732:924470] You&amp;apos;ve bought &amp;quot;Swift 100 Tips&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-08-06 01:10:27.095 TDProxyDemo[37732:924470] You&amp;apos;ve bought some clothes of medium size&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Bravo！&lt;a href=&quot;https://github.com/jojoting/TDProxyDemo&quot;&gt;Demo地址戳我&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总的来说，NSProxy这个在日常开发者很少见的类，的确有着它奇淫之处，这里推荐几个NSProxy相关的实践&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2014/08/24/objc-duck/&quot;&gt;objc与鸭子对象 by sunny&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/zwaldowski/BlocksKit&quot;&gt;BlocksKit by zwaldowski&lt;/a&gt;&lt;br&gt;附上个人觉得写得很好的一篇源码解析：&lt;br&gt;&lt;a href=&quot;https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/BlocksKit/%E7%A5%9E%E5%A5%87%E7%9A%84%20BlocksKit%20%EF%BC%88%E4%B8%80%EF%BC%89.md&quot;&gt;BlocksKit源码解析：《神奇的BlocksKit by Draveness》&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://dingtz.com/tags/iOS/"/>
    
      <category term="Dev" scheme="https://dingtz.com/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>阿里云服务器配置pptp-vpn</title>
    <link href="https://dingtz.com/2016/07/20/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEpptp-vpn/"/>
    <id>https://dingtz.com/2016/07/20/阿里云服务器配置pptp-vpn/</id>
    <published>2016-07-19T16:36:31.000Z</published>
    <updated>2016-08-09T14:39:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于博客要搬家到阿里云，所以顺便买了个新加坡的服务器准备自己配一个vpn，放弃之前用的鱼摆摆。总体来说在阿里云上配置vpn还算比较简单，二十分钟就可以搭建完成了。<br>服务器操作系统：CentOS 6.5 32位<br>1、安装PPP以及PPTPPPP:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@jojoServer ~]<span class="comment"># yum install ppp</span></div></pre></td></tr></table></figure></p>
<p>PPTP:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@jojoServer ~]<span class="comment"># yum install pptp</span></div></pre></td></tr></table></figure></p>
<p>根据提示安装好就可以了<br>2、配置PPTP安装好PPTP后要先配置一下PPTP，进入配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@jojoServer ~]<span class="comment"># vim /etc/pptpd.conf</span></div></pre></td></tr></table></figure></p>
<p>在文件最底部可以看见两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#localip 192.168.0.1</div><div class="line">#remoteip 192.168.0.234-238,192.168.0.245</div></pre></td></tr></table></figure></p>
<p>把注释去掉：<br><code>localip 192.168.0.1</code><br><code>remoteip 192.168.0.234-238,192.168.0.245</code><br>然后保存退出即可<br>修改完配置文件后我们还要修改一下DNS<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@jojoServer ~]<span class="comment"># vim /etc/ppp/options.pptpd</span></div></pre></td></tr></table></figure></p>
<p>同样在文件最后两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#ms-dns 10.0.0.1</div><div class="line">#ms-dns 10.0.0.2</div></pre></td></tr></table></figure></p>
<p>去掉注释，并将DNS改为<br><code>ms-dns 8.8.8.8</code><br><code>ms-dns 8.8.4.4</code></p>
<p>然后保存退出<br><strong>注：此处8.8.8.8与8.8.4.4为谷歌的DNS，可以根据个人改为其他的也可以</strong></p>
<p>最后要设置一下账号密码，进入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@jojoServer ~]<span class="comment"># vim /etc/ppp/chap-secrets</span></div></pre></td></tr></table></figure></p>
<p>这个文件只有两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Secrets for authentication using CHAP</div><div class="line"># client server secret IP addresse</div></pre></td></tr></table></figure></p>
<p>按照文件提示的格式插入一行即可，例如插入：<br><code>guest pptp 123</code></p>
<p><strong>这样就代表可以使用guset这个账号，密码是123来连接VPN了</strong></p>
<p>3、修改内核转发配置现在PPTP以及配置完成了，只需要让内核支持转发就可以了修改配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@jojoServer ~]<span class="comment"># vim /etc/sysctl.conf</span></div></pre></td></tr></table></figure></p>
<p>将<br><code>net.ipv4.ip_forward = 0</code>改为<code>net.ipv4.ip_forward = 1</code></p>
<p><code>net.ipv4.tcp_syncookies = 1</code>注释掉，改为<code>#net.ipv4.tcp_syncookies = 1</code>保存退出同时执行命令使其生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@jojoServer ~]<span class="comment"># sysctl -p</span></div></pre></td></tr></table></figure></p>
<p>最后，还需要添加iptables的转发规则：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@jojoServer ~]<span class="comment"># iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth1 -jMASQUERADE</span></div></pre></td></tr></table></figure></p>
<p><strong>注：这里由于阿里云双网卡，eth0是内网，eth1才是外网。然后保存一下配置并重启iptables</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@jojoServer ~]<span class="comment"># service iptables save</span></div><div class="line">[root@jojoServer ~]<span class="comment"># service iptables restart</span></div></pre></td></tr></table></figure></p>
<p>4、重启pptp<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@jojoServer ~]<span class="comment"># service pptpd restart</span></div></pre></td></tr></table></figure></p>
<p>5、连接vpn选择配置已经全部完成了，可以在PC或移动端通过之前添加的账号密码连接并使用VPN了<br>6、配置内网ip不走vpn由于连接VPN后默认所有的请求都会走VPN，所以打开国内网站就会比较慢如果忍受不了的，可以在电脑上配置一下这里给个<a href="https://github.com/jimmyxu/chnroutes" target="_blank" rel="external">github地址</a>里面有详细的教程了，linux，mac os，windows都支持<br>祝大家翻墙愉快</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于博客要搬家到阿里云，所以顺便买了个新加坡的服务器准备自己配一个vpn，放弃之前用的鱼摆摆。总体来说在阿里云上配置vpn还算比较简单，二十分钟就可以搭建完成了。&lt;br&gt;服务器操作系统：CentOS 6.5 32位&lt;br&gt;1、安装PPP以及PPTPPPP:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# yum install ppp&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PPTP:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# yum install pptp&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;根据提示安装好就可以了&lt;br&gt;2、配置PPTP安装好PPTP后要先配置一下PPTP，进入配置文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# vim /etc/pptpd.conf&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在文件最底部可以看见两行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#localip 192.168.0.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#remoteip 192.168.0.234-238,192.168.0.245&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把注释去掉：&lt;br&gt;&lt;code&gt;localip 192.168.0.1&lt;/code&gt;&lt;br&gt;&lt;code&gt;remoteip 192.168.0.234-238,192.168.0.245&lt;/code&gt;&lt;br&gt;然后保存退出即可&lt;br&gt;修改完配置文件后我们还要修改一下DNS&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# vim /etc/ppp/options.pptpd&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样在文件最后两行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#ms-dns 10.0.0.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#ms-dns 10.0.0.2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;去掉注释，并将DNS改为&lt;br&gt;&lt;code&gt;ms-dns 8.8.8.8&lt;/code&gt;&lt;br&gt;&lt;code&gt;ms-dns 8.8.4.4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后保存退出&lt;br&gt;&lt;strong&gt;注：此处8.8.8.8与8.8.4.4为谷歌的DNS，可以根据个人改为其他的也可以&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后要设置一下账号密码，进入&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# vim /etc/ppp/chap-secrets&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个文件只有两行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Secrets for authentication using CHAP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# client server secret IP addresse&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;按照文件提示的格式插入一行即可，例如插入：&lt;br&gt;&lt;code&gt;guest pptp 123&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样就代表可以使用guset这个账号，密码是123来连接VPN了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3、修改内核转发配置现在PPTP以及配置完成了，只需要让内核支持转发就可以了修改配置文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# vim /etc/sysctl.conf&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将&lt;br&gt;&lt;code&gt;net.ipv4.ip_forward = 0&lt;/code&gt;改为&lt;code&gt;net.ipv4.ip_forward = 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net.ipv4.tcp_syncookies = 1&lt;/code&gt;注释掉，改为&lt;code&gt;#net.ipv4.tcp_syncookies = 1&lt;/code&gt;保存退出同时执行命令使其生效：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# sysctl -p&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，还需要添加iptables的转发规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth1 -jMASQUERADE&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：这里由于阿里云双网卡，eth0是内网，eth1才是外网。然后保存一下配置并重启iptables&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# service iptables save&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# service iptables restart&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4、重启pptp&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@jojoServer ~]&lt;span class=&quot;comment&quot;&gt;# service pptpd restart&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;5、连接vpn选择配置已经全部完成了，可以在PC或移动端通过之前添加的账号密码连接并使用VPN了&lt;br&gt;6、配置内网ip不走vpn由于连接VPN后默认所有的请求都会走VPN，所以打开国内网站就会比较慢如果忍受不了的，可以在电脑上配置一下这里给个&lt;a href=&quot;https://github.com/jimmyxu/chnroutes&quot;&gt;github地址&lt;/a&gt;里面有详细的教程了，linux，mac os，windows都支持&lt;br&gt;祝大家翻墙愉快&lt;/p&gt;
    
    </summary>
    
    
      <category term="Dev" scheme="https://dingtz.com/tags/Dev/"/>
    
      <category term="Linux" scheme="https://dingtz.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>安全的NSArray与NSMutableArray操作</title>
    <link href="https://dingtz.com/2015/10/15/%E5%AE%89%E5%85%A8%E7%9A%84NSArray%E4%B8%8ENSMutableArray%E6%93%8D%E4%BD%9C/"/>
    <id>https://dingtz.com/2015/10/15/安全的NSArray与NSMutableArray操作/</id>
    <published>2015-10-15T14:37:13.000Z</published>
    <updated>2016-08-09T14:41:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们使用NSArray或者NSMutableArray时，通常调用<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (ObjectType)objectAtIndex:(<span class="built_in">NSUInteger</span>)index;</div></pre></td></tr></table></figure></p>
<p>来通过索引获取对象。但是在使用这个方法时经常会抛出越界的异常，例如定义一个数组，并获取指定下标的值：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSUInteger</span> index = <span class="number">4</span>;</div><div class="line"><span class="built_in">NSArray</span> *arr = [[<span class="built_in">NSArray</span> alloc]initWithObjects:<span class="string">@"1"</span>,<span class="string">@"2"</span>,<span class="string">@"3"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="keyword">id</span> obj = [arr objectAtIndex:index];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"object at index:%@"</span>,obj);</div></pre></td></tr></table></figure></p>
<p>这时会导致程序出错，错误日志：</p>
<blockquote>
<p><strong>*</strong> Terminating app due to uncaught exception ‘NSRangeException’, reason: ‘<strong>* -[__NSArrayI objectAtIndex:]: index 4 beyond bounds [0 .. 2]’</strong></p>
</blockquote>
<p>就是我们经常遇到的数组越界问题，为了避免这种问题的发生，我们应该对要穿入的索引值进行判断，如果超出了数组的边界，就应该直接返回空值。代码如下：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">        <span class="built_in">NSUInteger</span> index = <span class="number">4</span>;</div><div class="line">        <span class="built_in">NSArray</span> *arr = [[<span class="built_in">NSArray</span> alloc]initWithObjects:<span class="string">@"1"</span>,<span class="string">@"2"</span>,<span class="string">@"3"</span>, <span class="literal">nil</span>];</div><div class="line">        <span class="keyword">id</span> obj = <span class="literal">nil</span>;</div><div class="line">        <span class="keyword">if</span> (index &gt; arr.count) &#123;</div><div class="line">            obj = <span class="literal">nil</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            obj = [arr objectAtIndex:index];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"object at index:%@"</span>,obj);</div></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<blockquote>
<p><strong>object at index:(null)</strong></p>
</blockquote>
<p>因此，我们如果需要避免数组越界发生，有必要对索引值进行一次判断，但如果在工程中每一处都加判断未免过于麻烦，因此我们可以写一个NSArray的category扩展类，并重写<figure class="highlight plain"><figcaption><span>)index```方法。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">```objc</div><div class="line">- (id)safe_objectAtIndex:(NSUInteger )index&#123;</div><div class="line">    if (index &gt; self.count || index &lt; 0) &#123;</div><div class="line">        //index超出数组界限</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    return [self objectAtIndex:index];</div></pre></td></tr></table></figure></p>
<p>但同时我们应注意一个问题，如果通过这种方式强制性避免了越界导致的异常，可能会使工程中的其它部分受到一定程度的影响。因此应选择性地使用此方法。</p>
<p><a href="https://github.com/jojoting/TDSafeArray" target="_blank" rel="external">github地址</a></p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们使用NSArray或者NSMutableArray时，通常调用&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (ObjectType)objectAtIndex:(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)index;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;来通过索引获取对象。但是在使用这个方法时经常会抛出越界的异常，例如定义一个数组，并获取指定下标的值：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *arr = [[&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; alloc]initWithObjects:&lt;span class=&quot;string&quot;&gt;@&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;@&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;@&quot;3&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj = [arr objectAtIndex:index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;object at index:%@&quot;&lt;/span&gt;,obj);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时会导致程序出错，错误日志：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt; Terminating app due to uncaught exception ‘NSRangeException’, reason: ‘&lt;strong&gt;* -[__NSArrayI objectAtIndex:]: index 4 beyond bounds [0 .. 2]’&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就是我们经常遇到的数组越界问题，为了避免这种问题的发生，我们应该对要穿入的索引值进行判断，如果超出了数组的边界，就应该直接返回空值。代码如下：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *arr = [[&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; alloc]initWithObjects:&lt;span class=&quot;string&quot;&gt;@&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;@&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;@&quot;3&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index &amp;gt; arr.count) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            obj = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            obj = [arr objectAtIndex:index];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;object at index:%@&quot;&lt;/span&gt;,obj);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;object at index:(null)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，我们如果需要避免数组越界发生，有必要对索引值进行一次判断，但如果在工程中每一处都加判断未免过于麻烦，因此我们可以写一个NSArray的category扩展类，并重写&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;)index```方法。&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;```objc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (id)safe_objectAtIndex:(NSUInteger )index&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (index &amp;gt; self.count || index &amp;lt; 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //index超出数组界限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return nil;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return [self objectAtIndex:index];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但同时我们应注意一个问题，如果通过这种方式强制性避免了越界导致的异常，可能会使工程中的其它部分受到一定程度的影响。因此应选择性地使用此方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jojoting/TDSafeArray&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://dingtz.com/tags/iOS/"/>
    
      <category term="Dev" scheme="https://dingtz.com/tags/Dev/"/>
    
  </entry>
  
  <entry>
    <title>nil指针对NSDictionary及NSArray初始化的影响</title>
    <link href="https://dingtz.com/2015/10/13/nil%E6%8C%87%E9%92%88%E5%AF%B9NSDictionary%E5%8F%8ANSArray%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
    <id>https://dingtz.com/2015/10/13/nil指针对NSDictionary及NSArray初始化的影响/</id>
    <published>2015-10-13T14:48:47.000Z</published>
    <updated>2016-08-09T14:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做项目的时候遇到一个挺坑的崩溃问题，是由于NSDictionary初始化时nil指针引起的崩溃。假设我们现在要初始化一个{key1 : value1, key2 : value2, key3 : value3}的NSDictionary，一般有两种初始化方法：</p>
<p>1、使用标准的初始化方法：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> *dictionary ＝[[<span class="built_in">NSDictionaryalloc</span>] initWithObjectsAndKeys:value1,<span class="string">@"key1"</span>,value2,<span class="string">@"key2"</span>, value3 ,<span class="string">@"value3"</span>,<span class="literal">nil</span>];</div></pre></td></tr></table></figure></p>
<p>2、使用ios6.0以后新支持的初始化方法：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> *dictionary =@&#123;<span class="string">@"key1"</span> : value1,<span class="string">@"key2"</span> : value2,<span class="string">@"key3"</span> : value3&#125;;</div></pre></td></tr></table></figure></p>
<p>现在我们对value1 value2 value3进行赋值，并把value2设为nil指针:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *value1 =<span class="string">@"value1"</span>;<span class="built_in">NSString</span> *value2 =<span class="literal">nil</span>;<span class="built_in">NSString</span> *value3 =<span class="string">@"value3"</span>;</div></pre></td></tr></table></figure></p>
<p>这时如果使用第二种初始化方法，运行程序会发现崩溃，日志如下：</p>
<blockquote>
<p>DictionaryTextDemo[29390:1329578]<strong><em> Terminating app due to uncaught exception ‘NSInvalidArgumentException’, reason: ‘</em></strong> -[__NSPlaceholderDictionary initWithObjects:forKeys:count:]: attempt to insert nil object from objects[1]’</p>
</blockquote>
<p>发现系统会阻止你向object[1]插入一个nil指针，查询苹果官方文档得到</p>
<blockquote>
<p>Discussion<br>This method steps through the objects andkeys arrays, creating entries in the new dictionary as it goes. AnNSInvalidArgumentException is raised if a key or value object isnil.</p>
</blockquote>
<p>也就是说使用这种初始化方法的时候必须保证key跟value都不为nil，因此我们需要在初始化之前对其进行判断，如果为nil就不加入字典。但是如果有需求让value必须为空的时候，可以将value赋值为<code>[NSNull null]</code>这样就可以成功插入字典，最后打印出来的结果是</p>
<blockquote>
<p>DictionaryTextDemo[29510:1338517] dictionary : {key1 = value1;key2 = “”;value3 = value3;}</p>
</blockquote>
<p>另一种解决方法就是使用标准的初始化方法，即第一种初始化方法。但同时也要注意一个问题，使用<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NDictionary *dictionary = [[<span class="built_in">NSDictionaryalloc</span>]initWithObjectsAndKeys:value1,<span class="string">@"key1"</span>,value2,<span class="string">@"key2"</span>, value3 ,<span class="string">@"value3"</span>,<span class="literal">nil</span>];</div></pre></td></tr></table></figure></p>
<p>如果我们把其中一个key或者value设为nil指针，那么系统会判断为全部对象插入完成，即相当于我们初始化数组及字典时最后的nil。因此这种方法虽然能避免插入nil指针时抛出的异常，但可能会成为一个工程中很大的安全隐患，并且难以发现。所以推荐使用第二种初始化方法，并对nil指针进行必要的判断，选择性使用<code>[NSNull null]</code>来实现特点的需求。同理，使用NSArray时也应该注意这类问题。</p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做项目的时候遇到一个挺坑的崩溃问题，是由于NSDictionary初始化时nil指针引起的崩溃。假设我们现在要初始化一个{key1 : value1, key2 : value2, key3 : value3}的NSDictionary，一般有两种初始化方法：&lt;/p&gt;
&lt;p&gt;1、使用标准的初始化方法：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *dictionary ＝[[&lt;span class=&quot;built_in&quot;&gt;NSDictionaryalloc&lt;/span&gt;] initWithObjectsAndKeys:value1,&lt;span class=&quot;string&quot;&gt;@&quot;key1&quot;&lt;/span&gt;,value2,&lt;span class=&quot;string&quot;&gt;@&quot;key2&quot;&lt;/span&gt;, value3 ,&lt;span class=&quot;string&quot;&gt;@&quot;value3&quot;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、使用ios6.0以后新支持的初始化方法：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *dictionary =@&amp;#123;&lt;span class=&quot;string&quot;&gt;@&quot;key1&quot;&lt;/span&gt; : value1,&lt;span class=&quot;string&quot;&gt;@&quot;key2&quot;&lt;/span&gt; : value2,&lt;span class=&quot;string&quot;&gt;@&quot;key3&quot;&lt;/span&gt; : value3&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在我们对value1 value2 value3进行赋值，并把value2设为nil指针:&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *value1 =&lt;span class=&quot;string&quot;&gt;@&quot;value1&quot;&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *value2 =&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *value3 =&lt;span class=&quot;string&quot;&gt;@&quot;value3&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时如果使用第二种初始化方法，运行程序会发现崩溃，日志如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DictionaryTextDemo[29390:1329578]&lt;strong&gt;&lt;em&gt; Terminating app due to uncaught exception ‘NSInvalidArgumentException’, reason: ‘&lt;/em&gt;&lt;/strong&gt; -[__NSPlaceholderDictionary initWithObjects:forKeys:count:]: attempt to insert nil object from objects[1]’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现系统会阻止你向object[1]插入一个nil指针，查询苹果官方文档得到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Discussion&lt;br&gt;This method steps through the objects andkeys arrays, creating entries in the new dictionary as it goes. AnNSInvalidArgumentException is raised if a key or value object isnil.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说使用这种初始化方法的时候必须保证key跟value都不为nil，因此我们需要在初始化之前对其进行判断，如果为nil就不加入字典。但是如果有需求让value必须为空的时候，可以将value赋值为&lt;code&gt;[NSNull null]&lt;/code&gt;这样就可以成功插入字典，最后打印出来的结果是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DictionaryTextDemo[29510:1338517] dictionary : {key1 = value1;key2 = “”;value3 = value3;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一种解决方法就是使用标准的初始化方法，即第一种初始化方法。但同时也要注意一个问题，使用&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;NDictionary *dictionary = [[&lt;span class=&quot;built_in&quot;&gt;NSDictionaryalloc&lt;/span&gt;]initWithObjectsAndKeys:value1,&lt;span class=&quot;string&quot;&gt;@&quot;key1&quot;&lt;/span&gt;,value2,&lt;span class=&quot;string&quot;&gt;@&quot;key2&quot;&lt;/span&gt;, value3 ,&lt;span class=&quot;string&quot;&gt;@&quot;value3&quot;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果我们把其中一个key或者value设为nil指针，那么系统会判断为全部对象插入完成，即相当于我们初始化数组及字典时最后的nil。因此这种方法虽然能避免插入nil指针时抛出的异常，但可能会成为一个工程中很大的安全隐患，并且难以发现。所以推荐使用第二种初始化方法，并对nil指针进行必要的判断，选择性使用&lt;code&gt;[NSNull null]&lt;/code&gt;来实现特点的需求。同理，使用NSArray时也应该注意这类问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://dingtz.com/tags/iOS/"/>
    
      <category term="Dev" scheme="https://dingtz.com/tags/Dev/"/>
    
  </entry>
  
</feed>
